version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: "cub zk-ready zookeeper:2181 60"
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: "cub kafka-ready -b kafka:29092 1 60"
      interval: 15s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=stockdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d stockdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  redis:
    image: redis:6-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  data-fetcher:
    build: ./data-fetcher
    container_name: data-fetcher
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER_URL=kafka:29092
    restart: on-failure

  data-processor:
    build: ./data-processor
    container_name: data-processor
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BROKER_URL=kafka:29092
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=stockdb
      - REDIS_HOST=redis
    restart: on-failure

  api-server:
    build: ./api-server
    container_name: api-server
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy # NEW dependency for history endpoint
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BROKER_URL=kafka:29092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=stockdb
    restart: on-failure

volumes:
  postgres_data:
